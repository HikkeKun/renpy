.. Automatically generated file - do not modify.

.. function:: ui.adjustment(range=1, value=0, step=None, page=0, changed=None, adjustable=None, ranged=None)
    
    Adjustment objects represent a value that can be adjusted by a bar
    or viewport. They contain information about the value, the range
    of the value, and how to adjust the value in small steps and large
    pages.
    
    The following parameters correspond to fields or properties on
    the adjustment object:
    
    `range`
        The range of the adjustment, a number.
    
    `value`
        The value of the adjustment, a number.
    
    `step`
        The step size of the adjustment, a number. If None, then
        defaults to 1/10th of a page, if set. Otherwise, defaults
        to the 1/20th of the range.
    
        This is used when scrolling a viewport with the mouse wheel.
    
    `page`
        The page size of the adjustment. If None, this is set
        automatically by a viewport. If never set, defaults to 1/10th
        of the range.
    
        It's can be used when clicking on a scrollbar.
    
    The following parameters control the behavior of the adjustment.
    
    `adjustable`
         If True, this adjustment can be changed by a bar. If False,
         it can't.
    
         It defaults to being adjustable if a `changed` function
         is given or if the adjustment is associated with a viewport,
         and not adjustable otherwise.
    
    `changed`
        This function is called with the new value when the value of
        the adjustment changes.
    
    `ranged`
        This function is called with the adjustment object when
        the range of the adjustment is set by a viewport.
    
    .. method:: change(value)
    
        Changes the value of the adjustment to `value`, updating
        any bars and viewports that use the adjustment.
     

.. function:: ui.at(transform)
    
    Specifies a transform that is applied to the next displayable to
    be created. This is largely obsolete, as all UI functions now take
    an `at` argument.

.. function:: ui.close()
    
    Closes a displayable created with by a UI function. When a
    displayable is closed, we add new displayables to its parent,
    or to the layer if no displayable is open.

.. function:: ui.detached()
    
    Do not add the next displayable to any later or container. Use this if
    you want to assign the result of a ui function to a variable.

.. function:: ui.layer(name)
    
    Adds displayables to the layer named `name`. The later must be
    closed with :func:`ui.close`.

